#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 14 15:32:49 2017

The goal of this script is to code the Texture Synthesis with multi-scale 
strategy

Inspired from https://github.com/cysmith/neural-style-tf/blob/master/neural_style.py
and https://github.com/leongatys/PytorchNeuralStyleTransfer/blob/master/NeuralStyleTransfer.ipynb

@author: Gonthier Nicolas
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL']='0' # 1 to remove info, 2 to remove warning and 3 for all
import os.path
import tensorflow as tf
import scipy.io
import matplotlib.pyplot as plt
import numpy as np
import time
import pickle
import math
from Arg_Parser import get_parser_args 
from skimage.color import gray2rgb
import cv2
from shutil import copyfile
from functools import partial
import pathlib
import urllib



# Name of the 19 first layers of the VGG19
VGG19_LAYERS = (
    'conv1_1', 'relu1_1', 'conv1_2', 'relu1_2', 'pool1',

    'conv2_1', 'relu2_1', 'conv2_2', 'relu2_2', 'pool2',

    'conv3_1', 'relu3_1', 'conv3_2', 'relu3_2', 'conv3_3',
    'relu3_3', 'conv3_4', 'relu3_4', 'pool3',

    'conv4_1', 'relu4_1', 'conv4_2', 'relu4_2', 'conv4_3',
    'relu4_3', 'conv4_4', 'relu4_4', 'pool4',

    'conv5_1', 'relu5_1', 'conv5_2', 'relu5_2', 'conv5_3',
    'relu5_3', 'conv5_4', 'relu5_4')

used_layers_size =  {'input':3,'conv1' : 64,'relu1' : 64,'pool1': 64,'conv2' : 128,'relu2' : 128,'pool2':128,'conv3' : 256,'relu3' : 256,'pool3':256,'conv4': 512,'relu4' : 512,'pool4':512,'conv5' : 512,'relu5' : 512,'pool5':512}


def test_version_tf_sup(version_str):
    version_str_tab = version_str.split('.')
    tf_version_tab =  tf.__version__.split('.')
    status = False
    for a,b in zip(tf_version_tab,version_str_tab):
        if float(a) > float(b):
            status = True
    return(status)
    
def test_version_scipy_sup(version_str):
    version_str_tab = version_str.split('.')
    scipy_version_tab =  scipy.__version__.split('.')
    status = False
    for a,b in zip(scipy_version_tab,version_str_tab):
        if float(a) > float(b):
            status = True
    return(status)
    
if test_version_scipy_sup('1.2.0'):
    from scipy.imageio import imread
else:
    from scipy.misc import imread

def download_weights(VGG19_mat,verbose=False):
    """
    Download the VGG19 weights trained on 
    """
    if(VGG19_mat=='imagenet-vgg-verydeep-19.mat'):
        download_url = os.path.join("http://www.vlfeat.org/matconvnet/models/imagenet-vgg-verydeep-19.mat")
    else:
        raise(NotImplementedError)
    
    if verbose: print('downloading model, this might take a while...')
    urllib.request.urlretrieve(download_url)
    if verbose: print('download completed! loading DeepLab model...')
    
def get_vgg_layers(VGG19_mat='normalizedvgg.mat',verbose=False):
    """
    Load the VGG 19 layers
    """
 
    if not(os.path.isfile(VGG19_mat)):
        print(VGG19_mat,'is not found.')
        download_weights(VGG19_mat,verbose=verbose)
        raise(FileNotFoundError)
    if(VGG19_mat=='imagenet-vgg-verydeep-19.mat'):
        # The vgg19 network from http://www.vlfeat.org/matconvnet/pretrained/
        try:
            vgg_rawnet = scipy.io.loadmat(VGG19_mat)
            vgg_layers = vgg_rawnet['layers'][0]
        except(FileNotFoundError):
            print("The path to the VGG19_mat is not right or the .mat is not here")
            print("You can download it here : http://www.vlfeat.org/matconvnet/models/imagenet-vgg-verydeep-19.mat")
            raise
    elif(VGG19_mat=='normalizedvgg.mat'): # Normalized VGG19 network over images (see Gatys Texture papers) generated by Gang with the Caffe model provide by Gatys
        try:
            vgg_rawnet = scipy.io.loadmat(VGG19_mat)
            vgg_layers = vgg_rawnet['net'][0]['layers'][0][0]
        except(FileNotFoundError):
            print("The path to the VGG19_mat is not right or the .mat is not here")
            print("You have to  get the weight from https://github.com/leongatys/DeepTextures and convert them to .mat format.")
            raise
    else:
        print("VGG19_mat name is unknown but we will still try to read it")
        raise(ValueError)
    return(vgg_layers)

def net_preloaded(vgg_layers, input_image,pooling_type='avg',padding='SAME',
                  non_linearity_type='relu'):
    """
    This function read the vgg layers and create the net architecture
    We need the input image to know the dimension of the input layer of the net
    """
    
    net = {}
    _,height, width, numberChannels = input_image.shape # In order to have the right shape of the input
    current = tf.Variable(np.zeros((1, height, width, numberChannels), dtype=np.float32))
    net['input'] = current
    for i, name in enumerate(VGG19_LAYERS):
        kind = name[:4]
        if(kind == 'conv'):
            # Only way to get the weight of the kernel of convolution
            # Inspired by http://programtalk.com/vs2/python/2964/facenet/tmp/vggverydeep19.py/
            kernels = vgg_layers[i][0][0][2][0][0] 
            bias = vgg_layers[i][0][0][2][0][1]
            # matconvnet: weights are [width, height, in_channels, out_channels]
            # tensorflow: weights are [height, width, in_channels, out_channels]
            #kernels = tf.constant(np.transpose(kernels, (1,0 ,2, 3)))
            kernels = tf.constant(kernels)
            bias = tf.constant(bias.reshape(-1))
            current = conv_layer(current, kernels, bias,name,padding) 
            # Update the  variable named current to have the right size
        elif(kind == 'relu'):
            current = non_linearity(current,name,non_linearity_type)
        elif(kind == 'pool'):
            current = pool_layer(current,name,pooling_type,padding)

        net[name] = current

    assert len(net) == len(VGG19_LAYERS) +1 # Test if the length is right 
    return(net)

def non_linearity(current,name,non_linearity_type):
    if non_linearity_type=='relu':
        current = tf.nn.relu(current,name=name)
    elif non_linearity_type=='leaky_relu':
        current = tf.nn.leaky_relu(current,name=name)
    elif non_linearity_type=='id':
        current = tf.identity(current,name=name)
    return(current)

def conv_layer(input, weights, bias,name,padding='SAME'):
    """
    This function create a conv2d with the already known weight and bias
    
    conv2d :
    Computes a 2-D convolution given 4-D input and filter tensors.
    input: A Tensor. Must be one of the following types: half, float32, float64
    Given an input tensor of shape [batch, in_height, in_width, in_channels] and 
    a filter / kernel tensor of shape 
    [filter_height, filter_width, in_channels, out_channels]
    """
    stride = 1
    if(padding=='SAME' or padding=='VALID'):
        conv = tf.nn.conv2d(input, weights, strides=(1, stride, stride, 1),
            padding=padding,name=name)
    elif(padding=='Circular'):
        input = get_img_2pixels_more(input)
        conv = tf.nn.conv2d(input, weights, strides=(1, stride, stride, 1),
            padding='VALID',name=name)
    return(tf.nn.bias_add(conv, bias))

def get_img_2pixels_more(input):
    new_input = tf.concat([input,input[:,0:2,:,:]],axis=1)
    new_input = tf.concat([new_input,new_input[:,:,0:2,:]],axis=2)
    return(new_input)

def pool_layer(input,name,pooling_type='avg',padding='SAME'):
    """
    Average pooling on windows 2*2 with stride of 2
    input is a 4D Tensor of shape [batch, height, width, channels]
    Each pooling op uses rectangular windows of size ksize separated by offset 
    strides in the avg_pool function 
    """
    stride_pool = 2
    if(padding== 'Circular'): # TODO Test if paire ou impaire !!! 
        _,h,w,_ = input.shape
        if not(h%2==0):
            input = tf.concat([input,input[:,0:2,:,:]],axis=1)
        if not(w%2==0):
            input = tf.concat([input,input[:,:,0:2,:]],axis=2)
        padding = 'VALID'
    if pooling_type == 'avg':
        pool = tf.nn.avg_pool(input, ksize=(1, 2, 2, 1), strides=(1, stride_pool, stride_pool, 1),
                padding=padding,name=name) 
    elif pooling_type == 'max':
        pool = tf.nn.max_pool(input, ksize=(1, 2, 2, 1), strides=(1, stride_pool, stride_pool, 1),
                padding=padding,name=name) 
    return(pool)

def loss_LowResConstr(sess,net,scale,i_lowres,weightMultiplicatif=1.):
    """
    Compute the content term of the loss function on the input X and a lower version of it
    """
    weight_help_convergence = 10**9 
    x = net['input']
    #x_lowres = tf.image.resize_area(x,(scale,scale),align_corners=False)
    x_lowres = tf.image.resize_images(x,(scale[0],scale[1]),method=tf.image.ResizeMethod.BILINEAR,align_corners=False)
    M = scale[0]*scale[1]
    loss = tf.nn.l2_loss(tf.subtract(x_lowres,i_lowres))*(weightMultiplicatif*weight_help_convergence/tf.to_float(M**2))    
    return(loss)


def sum_Gram_losses(sess, net, dict_gram,M_dict,used_layers):
    """
    Compute the style term of the loss function with Gram Matrix from the
    Gatys Paper
    Input : 
    - the tensforflow session sess
    - the vgg19 net
    - the dictionnary of Gram Matrices
    - the dictionnary of the size of the image content through the net
    """
    # Info for the vgg19
    length_used_layers = float(len(used_layers))
    weight_help_convergence = 10**(9) # This wight come from a paper of Gatys
    # Because the function is pretty flat 
    total_texture_loss = 0
    for layer, weight in used_layers:
        # For one layer
        N = used_layers_size[layer[:5]]
        A = dict_gram[layer]
        A = tf.constant(A)
        # Get the value of this layer with the generated image
        M = M_dict[layer]
        x = net[layer]
        G = gram_matrix(x,N,M) # Nota Bene : the Gram matrix is normalized by M
        texture_loss = tf.nn.l2_loss(tf.subtract(G,A))  # output = sum(t ** 2) / 2
        texture_loss *=  weight * weight_help_convergence  / (2.*(N**2)*length_used_layers)
        total_texture_loss += texture_loss
    return(total_texture_loss)

def texture_losses(sess, net, dict_gram,M_dict,used_layers):
    """
    Compute the style term of the loss function with Gram Matrix from the
    Gatys et al. Paper
    Input : 
    - the tensforflow session sess
    - the vgg19 net
    - the dictionnary of Gram Matrices
    - the dictionnary of the size of the image content through the net
    Return an array of the style losses for the differents layers and the total_texture_loss
    """
    # Info for the vgg19
    length_used_layers = float(len(used_layers))
    weight_help_convergence = 10**(9) # This wight come from a paper of Gatys
    # Because the function is pretty flat 
    total_texture_loss = 0
    texture_losses_tab = []
    for i, couple in enumerate(used_layers):
        layer, weight = couple
        # For one layer
        N = used_layers_size[layer[:5]]
        A = dict_gram[layer]
        A = tf.constant(A)
        # Get the value of this layer with the generated image
        M = M_dict[layer]
        x = net[layer]
        G = gram_matrix(x,N,M) # Nota Bene : the Gram matrix is normalized by M
        texture_loss = tf.nn.l2_loss(tf.subtract(G,A))  # output = sum(t ** 2) / 2
        texture_loss *=  weight * weight_help_convergence  / (2.*(N**2)*length_used_layers)
        texture_losses_tab += [texture_loss]
        total_texture_loss += texture_loss
    return(total_texture_loss,texture_losses_tab)


def loss_autocorr(sess,net,image_texture,M_dict,used_layers,gamma_autocorr=1.):
    """
    Computation of the autocorrelation of the filters
    """
    length_used_layers_int = len(used_layers)
    length_used_layers = float(length_used_layers_int)
    weight_help_convergence = (10**9)
    total_texture_loss = 0.

    
    _, h_a, w_a, N = image_texture.shape      
    sess.run(net['input'].assign(image_texture))
        
    for layer, weight in used_layers:
        N = used_layers_size[layer[:5]]
        M = M_dict[layer]
        a = sess.run(net[layer])
        x = net[layer]
        x = tf.transpose(x, [0,3,1,2])
        a = tf.transpose(a, [0,3,1,2])
        F_x = tf.fft2d(tf.complex(x,0.))
        R_x = tf.real(tf.multiply(F_x,tf.conj(F_x))) # Module de la transformee de Fourrier : produit terme a terme
        R_x /= tf.to_float(M**2) # Normalisation du module de la TF
        F_a = tf.fft2d(tf.complex(a,0.))
        R_a = tf.real(tf.multiply(F_a,tf.conj(F_a))) # Module de la transformee de Fourrier
        R_a /= tf.to_float(M**2)
        texture_loss = tf.nn.l2_loss(tf.subtract(R_x,R_a))  
        texture_loss *=  gamma_autocorr* weight * weight_help_convergence  / (2.*(N**2)*length_used_layers)
        total_texture_loss += texture_loss
    total_texture_loss =tf.to_float(total_texture_loss)
    return(total_texture_loss)
    
def saveImExt(nameIm,nameOrign,extension,folder=''):
    nameNew = folder+  nameOrign + '_IntermediateIm_' + extension + '.png'
    copyfile(nameIm, nameNew)


    
      
def loss_spectrum(sess,net,image_texture,M_dict,beta,eps = 0.001):
    """
    Computation of the spectrum loss on the input image from Gang 2016 
    https://arxiv.org/pdf/1605.01141.pdf
    """
    #eps = 10**(-16)
    #
    #print('eps value :',eps)
    M = M_dict['input'] # Nombre de pixels
    
    x = net['input'] # Image en cours de synthese
        
    #For color images,
    #the phase of the gray level image is first computed, and then
    #imposed to each color channel
     
    a = tf.transpose(image_texture, [0,3,1,2]) # On passe l image de batch,h,w,canaux à  batch,canaux,h,w
    F_a = tf.fft2d(tf.complex(a,0.)) # TF de l image de reference
    
    x_t = tf.transpose(x, [0,3,1,2])
    F_x = tf.fft2d(tf.complex(x_t,0.)) # Image en cours de synthese 
    
    # Element wise multiplication of FFT and conj of FFT
    if not(test_version_tf_sup('1.7')):
        innerProd = tf.reduce_sum(tf.multiply(F_x,tf.conj(F_a)), 1, keep_dims=True)  # sum(ftIm .* conj(ftRef), 3); cad somme sur les channels 
    else:
        innerProd = tf.reduce_sum(tf.multiply(F_x,tf.conj(F_a)), 1, keepdims=True)  # sum(ftIm .* conj(ftRef), 3); cad somme sur les channels 
    # Shape = [  1   1 512 512] pour une image 512*512
    #module_InnerProd = tf.pow(tf.multiply(innerProd,tf.conj(innerProd)),0.5) # replace by tf.abs
    #print(innerProd)
    if test_version_tf_sup('1.4'):
        module_InnerProd = tf.complex(tf.abs(innerProd),0.) # Possible with tensorflow 1.4
    else:
        print("You nedd a version of Tensorflow superior to 1.4")
        raise(NotImplementedError)
    #print(module_InnerProd)
    dephase = tf.divide(innerProd,tf.add(module_InnerProd,eps))
    #print(dephase)
    ftNew =  tf.multiply(dephase,F_a) #compute the new version of the FT of the reference image
    # Element wise multiplication
    imF = tf.ifft2d(ftNew)
    imF =  tf.real(tf.transpose(imF, [0,2,3,1]))
    loss = tf.nn.l2_loss(tf.subtract(x,imF)) # sum (x**2)/2
    loss *= beta/(3*M)
    return(loss)    
    

        
def gram_matrix(x,N,M):
  """
  Computation of the Gram Matrix for one layer we normalize with the 
  number of pixels M
  
  Warning the way to compute the Gram Matrix is different from the paper
  but it is equivalent, we use here the F matrix with the shape M*N
  That's quicker
  """
  # This implemented version is quicker than this one :
  #x = tf.transpose(x,(0,3,1,2))
  #F = tf.reshape(x,[tf.to_int32(N),tf.to_int32(M)])
  #G = tf.matmul(F,tf.transpose(F))
  
  F = tf.reshape(x,[M,N])
  G = tf.matmul(tf.transpose(F),F)
  G /= tf.to_float(M)
  # That come from Control paper of Gatys et al.
  return(G)
 
def get_Gram_matrix(vgg_layers,image_texture,pooling_type='avg',padding='SAME',non_linearity_type='relu',args=None):
    """
    Computation of all the Gram matrices from one image thanks to the 
    vgg_layers
    """
    if args.GramLightComput:
        print('Warning you are using a light version of the Gram Matrix dictionnary,this can cause some side effect it was not test !')
        # TODO : tester tous les cas limites genre les configurations etc !
        layers_to_use = []
        layers_to_use += args.used_layers 
    else: 
        layers_to_use = VGG19_LAYERS 
    
    dict_gram = {}
    net = net_preloaded(vgg_layers, image_texture,pooling_type,padding,non_linearity_type=non_linearity_type) # net for the style image
    sess = tf.Session()
    sess.run(net['input'].assign(image_texture))
    a = net['input']
    _,height,width,N = a.shape
    M = height*width
    A = gram_matrix(a,tf.to_int32(N),tf.to_int32(M))
    dict_gram['input'] = sess.run(A)    
    for layer in layers_to_use:
        a = net[layer]
        _,height,width,N = a.shape
        M = height*width
        A = gram_matrix(a,tf.to_int32(N),tf.to_int32(M))
        dict_gram[layer] = sess.run(A) # Computation
    sess.close()
    tf.reset_default_graph() # To clear all operation and variable
    return(dict_gram)        
             
def get_clip_values(image_texture=None,BGR=False):
    """
    Return the max and min value for the clipping and other find in the
    optimization
    If BGR is True then we return 2 vectors of 3 elements
    """
    if(image_texture is None):
        # Max et min value from the ImageNet databse mean
        clip_value_min=-124.
        clip_value_max=152.
    elif(BGR==False):
        clip_value_max = np.max(image_texture)
        clip_value_min = np.min(image_texture)
    elif(BGR==True):
        clip_value_min = np.min(image_texture,axis=(0,1,2)) # along the BGR axis
        clip_value_max = np.max(image_texture,axis=(0,1,2)) # along the BGR axis
    return(clip_value_min,clip_value_max)
    
def preprocess(img):
    """
    This function takes a RGB image and process it to be used with 
    tensorflow
    """
    # shape (h, w, d) to (1, h, w, d)
    img = img[np.newaxis,:,:,:]
    img -= np.array([103.939, 116.779,123.68 ]).reshape((1,1,1,3))
    ## subtract the imagenet mean for a RGB image
    
    return(img)

def postprocess(img):
    """
    To the unprocessing analogue to the "preprocess" function from 4D array
    to RGB image
    """
    # add the imagenet mean 
    img += np.array([103.939, 116.779,123.68 ]).reshape((1,1,1,3))

    img = img[0]
    img = np.clip(img,0,255).astype('uint8')
    return(img)  

def get_M_dict(image_h,image_w):
    """
    This function compute the size of the different dimension in the con
    volutionnal net
    """
    M_dict =  {'conv1' : 0,'relu1' : 0,'pool1':0,'conv2' : 0,'relu2' : 0,'pool2':0,'conv3' : 0,'relu3' : 0,'pool3':0,'conv4': 0,'relu4' : 0,'pool4':0,'conv5' : 0,'relu5' : 0,'pool5':0}
    M_dict = {
    'conv1_1': 0, 'relu1_1': 0, 'conv1_2': 0, 'relu1_2': 0, 'pool1': 0,

    'conv2_1': 0, 'relu2_1': 0, 'conv2_2': 0, 'relu2_2': 0, 'pool2': 0,

    'conv3_1': 0, 'relu3_1': 0, 'conv3_2': 0, 'relu3_2': 0, 'conv3_3': 0,
    'relu3_3': 0, 'conv3_4': 0, 'relu3_4': 0, 'pool3': 0,

    'conv4_1': 0, 'relu4_1': 0, 'conv4_2': 0, 'relu4_2': 0, 'conv4_3': 0,
    'relu4_3': 0, 'conv4_4': 0, 'relu4_4': 0, 'pool4': 0,

    'conv5_1': 0, 'relu5_1': 0, 'conv5_2': 0, 'relu5_2': 0, 'conv5_3': 0,
    'relu5_3': 0, 'conv5_4': 0, 'relu5_4': 0}
    image_h_tmp = image_h
    image_w_tmp = image_w
    M = image_h_tmp*image_w_tmp
    for key in M_dict.keys():
        if(key[:4]=='conv'):
            M_dict[key] = M
        elif(key[:4]=='pool'):
            image_h_tmp =  math.ceil(image_h_tmp / 2)
            image_w_tmp = math.ceil(image_w_tmp / 2)
            M = image_h_tmp*image_w_tmp
            M_dict[key] = M
        elif(key[:4]=='relu'):
            M_dict[key] = M
    M_dict['input'] = M_dict['conv1_1']
    return(M_dict)  
  
def print_loss_tab(sess,list_loss,list_loss_name,numIter=-1):
    """
    Fonction pour afficher la valeur des différentes loss
    """
    strToPrint = ''
    if numIter >= 0:
        strToPrint +='Step ' + str(numIter) +' : '
    for loss,loss_name in zip(list_loss,list_loss_name):
        loss_tmp = sess.run(loss)
        strToPrint +=  loss_name + ' = {:.2e}'.format(loss_tmp)
        strToPrint += ', '
    strToPrint = strToPrint[:-2]
    print(strToPrint)
    return(strToPrint)
    
def print_loss(sess,loss_total,content_loss,texture_loss):
    loss_total_tmp = sess.run(loss_total)
    content_loss_tmp = sess.run(content_loss)
    texture_loss_tmp = sess.run(texture_loss)
    strToPrint ='Total loss = {:.2e}, Content loss  = {:.2e}, Style loss  = {:.2e}'.format(loss_total_tmp,content_loss_tmp,texture_loss_tmp)
    print(strToPrint)

def get_init_noise_img(image_content,init_noise_ratio,range_value):
    """ This function return a white noise image for the initialisation 
    this image can be linearly miwed with the image content with a ratio
    """
    _,image_h, image_w, number_of_channels = image_content.shape 
    low = 127.5 - range_value
    high = 127.5 + range_value
    noise_img = np.random.uniform(low,high, (image_h, image_w, number_of_channels)).astype('float32')
    noise_img = preprocess(noise_img)
    if(init_noise_ratio >= 1.):
        noise_img = noise_img
    elif(init_noise_ratio <= 0.0):
        noise_img = image_content
    else:
        noise_img = init_noise_ratio* noise_img + (1.-init_noise_ratio) * image_content
    return(noise_img)
    
def get_init_noise_img_smooth_grad(image_content):
    """
    This function return a random initial image with a mean near to the 
    mean value of the content image and with a smooth gradient 
    """
    from skimage import filters
    _,image_h, image_w, number_of_channels = image_content.shape 
    low = -1
    high = 1
    noise_img = np.random.uniform(low,high, (image_h, image_w, number_of_channels))
    gaussian_noise_img = filters.gaussian(noise_img, sigma=2,mode='reflect')
    for i in range(3):
         gaussian_noise_img[:,:,i] += np.mean(image_content[:,:,i]) # Add the mean of each channel
    gaussian_noise_img = np.clip(gaussian_noise_img,0.,255.)
    preprocess_img = preprocess(gaussian_noise_img)
    return(preprocess_img)
    
def get_init_noise_img_gaussian(image_content,init_noise_ratio):
    """
    Generate an image with a gaussian white noise aroud the BGR mean of the
    image content
    """
    b,image_h, image_w, number_of_channels = image_content.shape 
    noise_img = np.random.randn(b,image_h, image_w, number_of_channels) 
    bgr_mean = np.mean(image_content,axis=(0,1,2)) # This mean have been recentered by the ImageNet mean
    for i in range(number_of_channels):
        noise_img[:,:,:,i] += bgr_mean[i]
    # random floats sampled from a univariate “normal” (Gaussian) distribution of mean 0 and variance 1 
    # Doesn't need preprocess because already arond 0 with a small range
    
    if(init_noise_ratio >= 1.):
        noise_img = noise_img
    elif(init_noise_ratio <= 0.0):
        noise_img = image_content
    else:
        noise_img = init_noise_ratio* noise_img + (1.-init_noise_ratio) * image_content
    
    return(noise_img)


def get_lbfgs_bnds(init_img,clip_value_min,clip_value_max,BGR=False):
    """
    This function create the bounds for the LBFGS scipy wrappper, for a 
    image centered according to the ImageNet mean
    
    init_img is only used for the dimension of the image
    clip_value_min,clip_value_max compute on the style image before normally
    
    This function return bounds for tensorflow >= 1.3 to be used with the scipy 
    optimizer
    
    """
    dim1,height,width,N = init_img.shape
    if(BGR==False):
        # Bounds from [0,255] - [124,103] if ImageNet 
        bnd_inf = clip_value_min*np.ones((dim1,height,width,N))
        # We need to flatten the array in order to use it in the LBFGS algo
        bnd_sup = clip_value_max*np.ones((dim1,height,width,N))
        bnds = (bnd_inf, bnd_sup)
    else:
        # To bound this variable :  tf.Variable(np.zeros((1, height, width, numberChannels), dtype=np.float32)) by pair (min,max)
        bnd_inf_B = clip_value_min[0]*np.ones((dim1,height,width))
        bnd_inf_G = clip_value_min[1]*np.ones((dim1,height,width))
        bnd_inf_R = clip_value_min[2]*np.ones((dim1,height,width))
        bnd_inf = np.stack((bnd_inf_B, bnd_inf_G,bnd_inf_R),axis=-1)
        #bnd_inf = np.zeros_like(init_img) 
        #bnd_inf[:,:,:,0] = bnd_inf_B
        #bnd_inf[:,:,:,1] = bnd_inf_G
        #bnd_inf[:,:,:,2] = bnd_inf_R
        bnd_sup_B = clip_value_max[0]*np.ones((dim1,height,width))
        bnd_sup_G = clip_value_max[1]*np.ones((dim1,height,width))
        bnd_sup_R = clip_value_max[2]*np.ones((dim1,height,width))
        bnd_sup = np.stack((bnd_sup_B, bnd_sup_G,bnd_sup_R),axis=-1)
        #bnd_sup = np.zeros_like(init_img) 
        #bnd_sup[:,:,:,0] = bnd_sup_B
        #bnd_sup[:,:,:,1] = bnd_sup_G
        #bnd_sup[:,:,:,2] = bnd_sup_R
        #print(bnd_sup.shape)
        bnds = (bnd_inf, bnd_sup)
    return(bnds)

def get_Gram_matrix_wrap(args,vgg_layers,image_texture,pooling_type='avg',padding='SAME',non_linearity_type='relu'):
    _,image_h_art, image_w_art, _ = image_texture.shape
    vgg_name = args.vgg_name
    stringAdd = ''
    if(vgg_name=='normalizedvgg.mat'):
        stringAdd = '_n' # Network pretrained by Gatys et al.
    elif(vgg_name=='imagenet-vgg-verydeep-19.mat'):
        stringAdd = '_v' # Regular one
    if not(non_linearity_type=='relu'):
        non_linearity_type_str = '_'+str(non_linearity_type)
    else:
        non_linearity_type_str =''
    data_style_path = args.data_folder + "gram_"+args.texture_ref_name+"_"+str(image_h_art)+"_"+str(image_w_art)+"_"+str(pooling_type)+"_"+str(padding)+non_linearity_type_str+stringAdd
    if args.GramLightComput:
        data_style_path += '_lightVersion'
    if not(args.vgg_name=='normalizedvgg.mat'):
        ext_vggname = args.vgg_name
        ext_vggname = ext_vggname.split('.')[0]
        data_style_path += '_' +ext_vggname
    data_style_path += ".pkl"
    if(vgg_name=='random_net.mat') or args.recomputePrepocess:
        try:
            os.remove(data_style_path)
        except:
            pass
    try:
        if(args.verbose): print("Load Data ",data_style_path)
        dict_gram = pickle.load(open(data_style_path, 'rb'))
    except(FileNotFoundError):
        if(args.verbose): print("The Gram Matrices doesn't exist, we will generate them.")
        dict_gram = get_Gram_matrix(vgg_layers,image_texture,pooling_type,padding,non_linearity_type,args)
        with open(data_style_path, 'wb') as output_gram_pkl:
            pickle.dump(dict_gram,output_gram_pkl)
        if(args.verbose): print("Pickle dumped")
    return(dict_gram)


def plot_image_with_postprocess(args,image,name="",fig=None):
    """
    Plot the image using matplotlib
    """
    if(fig is None):
        fig = plt.figure()
    plt.imshow(postprocess(image))
    plt.title(name)
    if(args.verbose): print("Plot",name)
    fig.canvas.flush_events()
    time.sleep(10**(-6))
    return(fig)

def get_init_img_wrap(args,output_image_path,image):
    """
    Function that regroup different way to create differente value for 
    initial condition 
    """
    if(not(args.start_from_noise)):
        try:
            init_img = preprocess(imread(output_image_path).astype('float32'))
            if(args.verbose):  print("Use the former image")
        except(FileNotFoundError):
            if(args.verbose): print("Former image not found, use of white noise mixed with the content image as initialization image")
            # White noise that we use at the beginning of the optimization
            init_img = get_init_noise_img(image,args.init_noise_ratio,args.init_range)
    elif(args.init =='smooth_grad'):
        if(args.verbose): print("Noisy image generation with a smooth gradient")
        print("Warning this don t take into account init_noise_ratio")
        init_img = get_init_noise_img_smooth_grad(image) # TODO add a ratio for this kind of initialization also
    elif(args.init=='Gaussian'):
        if(args.verbose): print("Noisy image generation with a Gaussian white noise")
        init_img = get_init_noise_img_gaussian(image,args.init_noise_ratio)
    elif(args.init=='Uniform'):
        if(args.verbose): print("Noisy image generation init_noise_ratio = ",args.init_noise_ratio)
        init_img = get_init_noise_img(image,args.init_noise_ratio,args.init_range)
    elif(args.init=='Cst'):
        if(args.verbose): print("Constante image")
        _,image_h, image_w, number_of_channels = image.shape 
        noise_img = (127.5*np.ones((image_h, image_w, number_of_channels))).astype('float32')
        init_img = preprocess(noise_img)
    return(init_img)

def get_upScaleOf(namefile,newscale):
    try:
        init_img = imread(namefile)
        if not(newscale is None):
            init_img = cv2.resize(init_img,(newscale[1],newscale[0]),interpolation=cv2.INTER_CUBIC)
            # Warning ! cv2.resize need w,h whereas in scale it is provide h*w
        upsampled_img = preprocess(init_img.astype('float32'))
    except(FileNotFoundError):
        print('FileNotFoundError')
        raise(FileNotFoundError)
    return(upsampled_img)
    

def load_img(args,img_name,scale=None):
    """
    This function load the image and convert it to a numpy array and do 
    the preprocessing
    """
    image_path = args.img_folder + img_name + '.'+args.img_ext
    print('image_path',image_path)
    new_img_ext = args.img_ext
    try:
        img = imread(image_path)  # Float between 0 and 255
    except IOError:
        if(args.verbose): print("Exception when we try to open the image, try with a different extension format",str(args.img_ext))
        if(args.img_ext=="jpg"):
            new_img_ext = "png"
        elif(args.img_ext=="png"):
            new_img_ext = "jpg"
        try:
            image_path = args.img_folder + img_name+'.' +new_img_ext # Try the new path
            print('image_path2',image_path)
            img = imread(image_path,mode='RGB')
            if(args.verbose): print("The image have been sucessfully loaded with a different extension than",str(args.img_ext))
        except IOError:
            try:
                image_path = args.img_folder + img_name # Try the new path
                img = imread(image_path,mode='RGB')
                if(args.verbose): print("The image have been sucessfully loaded without extension")
            except IOError:
                if(args.verbose): print("Exception when we try to open the image, we already test the 2 differents extension and without it.")
                raise
    if(len(img.shape)==2):
        if(args.verbose): print("Convert Grey Scale to RGB")
        img = gray2rgb(img) # Convertion greyscale to RGB
    if not(scale is None):
        img = cv2.resize(img, (scale[1],scale[0]),interpolation=cv2.INTER_AREA) 
        # Warning ! cv2.resize need w,h whereas in scale it is provide h*w
    img = preprocess(img.astype('float32'))
    return(img)

def get_losses(args,sess, net,M_dict,image_texture,dict_gram,pooling_type,padding,
        former_scale=None,i_lowres=None):
    """ Compute the total loss map of the sub loss """
    #Get the layer used for texture synthesis
    if(args.config_layers=='PoolConfig'):
        used_layers = [('conv1_1',1),('pool1',1),('pool2',1),('pool3',1),('pool4',1)]
    elif(args.config_layers=='FirstConvs'):
        used_layers = [('conv1_1',1),('conv2_1',1),('conv3_1',1)]
    elif(args.config_layers=='GatysConfig'):
        used_layers = [('relu1_1',1),('pool1',1),('pool2',1),('pool3',1),('pool4',1)]
    elif(args.config_layers=='Custom'):
        if not(len(args.used_layers)==len(args.texture_layer_weights)):
            args.texture_layer_weights = [1.]*len(args.used_layers)
            print('The texture_layer_weights is not the same length than the used_layers, we replace it by [1.]*len(args.used_layers)')
        used_layers = list(zip(args.used_layers,args.texture_layer_weights))
    if(args.verbose): print('Texture layers',used_layers)
    
    loss_total = tf.constant(0.)
    list_loss =  []
    list_loss_name =  []
    assert len(args.loss)
    if('Gram' in args.loss):
        # Gatys, Gram and texture are the same loss : the one based on the Gram matrix from the feature maps
        gram_loss =  sum_Gram_losses(sess,net,dict_gram,M_dict,used_layers)
        list_loss +=  [gram_loss]
        list_loss_name +=  ['gram_loss']
    
    if('autocorr'  in args.loss): 
         autocorr_loss = loss_autocorr(sess,net,image_texture,M_dict,used_layers,args.gamma_autocorr)
         list_loss +=  [autocorr_loss]
         list_loss_name +=  ['autocorr_loss'] 

    if('spectrum'  in args.loss):
         spectrum_loss = loss_spectrum(sess,net,image_texture,M_dict,args.beta_spectrum,eps=args.eps)
         list_loss +=  [spectrum_loss]
         list_loss_name +=  ['spectrum_loss']   
     
         
    # If we have a strong constraint on a low resolution version of the image
    if args.MS_Strat == 'Constr' and not(i_lowres is None): 
        LowResConstr_loss = loss_LowResConstr(sess,net,former_scale,i_lowres,weightMultiplicatif=args.WLowResConstr)   
        list_loss +=  [LowResConstr_loss]
        list_loss_name +=  ['LowResConstr_loss']
         

    loss_total = tf.reduce_sum(list_loss)
   
    list_loss +=  [loss_total]
    list_loss_name +=  ['loss_total']
    return(loss_total,list_loss,list_loss_name)
    
def get_scales(image_h,image_w,MS_minscale,K):
    """
    This function produce the list of scale for the image synthesis
    If K!=-1 we can work with no squared image
    """
    list_scale = []
    if K==-1:
        if image_h < image_w:
            dim_image = image_h
            MS_minscale_h = MS_minscale
            MS_minscale_w = int(np.floor(MS_minscale*image_w/image_h))
        else:
            dim_image = image_w
            MS_minscale_h = int(np.floor(MS_minscale*image_h/image_w))
            MS_minscale_w = MS_minscale
        while (MS_minscale <= dim_image):
            list_scale += [[MS_minscale_h,MS_minscale_w]]
            MS_minscale_h *= 2
            MS_minscale_w *= 2
            if MS_minscale_h==image_h:
                MS_minscale_w = image_w
            if MS_minscale_w==image_w:
                MS_minscale_h = image_h
        if not(list_scale[-1][0]==image_h) or not(list_scale[-1][1]==image_w):
            list_scale += [[image_h,image_w]]
    else:
        for i in range(-K,1):
            list_scale += [[int(np.floor(image_h*(2**i))),int(np.floor(image_w*(2**i)))]]
    return(list_scale)
    
    
def run_synthesis(args):
    """
    This function is the main core of the program it need args in order to
    set up all the things and run an optimization in order to produce an 
    image 
    """
    if args.verbose:
        tinit = time.time()
        print("verbosity turned on")
        print(args)
        
    pathlib.Path(args.img_output_folder).mkdir(parents=True, exist_ok=True) # Create the output folder if it does nt exist
    if not(args.img_output_folder[-1]=='/'):
        args.img_output_folder += '/'
    if not(args.img_folder[-1]=='/'):
        args.img_folder += '/'
    output_image_path_first = args.img_output_folder + args.output_img_name+'.' + args.img_ext
    if(args.verbose and args.img_ext=='jpg'): print("Be careful you are saving the image in JPEG !")
    image_texture_first = load_img(args,args.texture_ref_name)
   
    _,image_h_first, image_w_first, number_of_channels = image_texture_first.shape
        
    if args.MS_Strat in ['Init','Constr']:
        if args.verbose: print("I would like to warm you up that the resize function from TF I is not the best one.")
        if not(image_h_first%args.MS_minscale==0) or not(image_w_first%args.MS_minscale==0):
            if args.verbose: print('It seems that the scale is not divised by the args.MS_minscale we will deal with it for the last scale')
        if image_h_first < args.MS_minscale:
            print('image_h < args.MS_minscale so no multiscale strategy')
        list_scale = get_scales(image_h_first,image_w_first,args.MS_minscale,args.K)
        tmp_output_image_path = args.img_output_folder + 'TextureForMSStrat' + '.'+args.img_ext
    else:
        list_scale = [[image_h_first,image_w_first]]
    former_scale = None
    i_lowres = None
    
    # Loop on the scale
    for i_scale,scales in enumerate(list_scale):
        scale_h,scale_w = scales
        if args.verbose and not(args.MS_Strat==''):
            print('== Scale number ',str(1+i_scale),'on ',len(list_scale),' equal to ',scale_h,' * ',scale_w,'scale',args.MS_Strat,' ==')
        if scale_h == image_h_first or len(list_scale)==1:
            image_h = image_h_first
            image_w = image_w_first
            image_texture = image_texture_first
            output_image_path = output_image_path_first
        else:
            image_h = scale_h
            image_w = scale_w
            image_texture = load_img(args,args.texture_ref_name,scale=[scale_h,scale_w])
            output_image_path = tmp_output_image_path
            if args.saveMS or args.savedIntermediateIm: 
                image_texture_pp = postprocess(image_texture.copy())
                tmp_path_wt_ext = args.img_output_folder + args.texture_ref_name + '_Ref_' + str(list_scale[i_scale][0])
                tmp_path = tmp_path_wt_ext+'.' + args.img_ext  
                scipy.misc.toimage(image_texture_pp).save(tmp_path)
         
        # Definition of the callback for the optimization
        global _iter
        _iter = 0
        def print_loss_tab_callback(xs,nbIterSaved,h,w,list_loss,list_loss_name,sess):
            global _iter
            _iter += 1
            if (_iter-1) % nbIterSaved == 0:
                X_reshape = np.reshape(xs.copy(),(1,h,w,3))
                sess.run(assign_op, {placeholder: X_reshape})
                print_loss_tab(sess,list_loss,list_loss_name,numIter=_iter)
            return(False)
            
        def savedIm_callback(xs,nbIterSaved,h,w,output_image_path,ext):
            """
            This is a step_callback function it will save the image every 
            nbIterSaved iterations
            """
            global _iter
            _iter += 1
            if (_iter-1) % nbIterSaved == 0:
                X_reshape = np.reshape(xs.copy(),(1,h,w,3))
                sess.run(assign_op, {placeholder: X_reshape})
                print_loss_tab(sess,list_loss,list_loss_name,numIter=_iter)
                result_img_postproc = postprocess(X_reshape)
                output_image_path = output_image_path + '_' +str(_iter) + ext
                scipy.misc.toimage(result_img_postproc.copy()).save(output_image_path)
            return(False)
            
        if(args.clipping_type=='ImageNet'):
            BGR=False
            clip_value_min,clip_value_max = get_clip_values(None,BGR)
        elif(args.clipping_type=='ImageStyle'):
            BGR=False
            clip_value_min,clip_value_max = get_clip_values(image_texture,BGR)
        elif(args.clipping_type=='ImageStyleBGR'):
            BGR = True
            clip_value_min,clip_value_max = get_clip_values(image_texture,BGR)
        
        t1 = time.time()
        pooling_type = args.pooling_type
        padding = args.padding
        non_linearity_type = args.non_linearity_type
        vgg_layers = get_vgg_layers(args.vgg_name,args.verbose)
        
        # Precomputation of the Gram Matrix :
        
        if ('Gram' in args.loss):
            if (args.MS_Strat in ['Init','Constr']) or args.GramLightComput:
                if args.verbose: print("In those cases we will not use the precomputed gram matrix")
                dict_gram = get_Gram_matrix(vgg_layers,image_texture,pooling_type,padding,non_linearity_type,args)
            else:
                dict_gram = get_Gram_matrix_wrap(args,vgg_layers,image_texture,pooling_type,padding,non_linearity_type)
        else:
            dict_gram = None
      
        M_dict = get_M_dict(image_h,image_w)
            
        net = net_preloaded(vgg_layers,image_texture,pooling_type,padding,non_linearity_type=non_linearity_type) 
        
        t2 = time.time()
        if(args.verbose): print("Net loaded and Gram computation (if needed) done after ",t2-t1," s")

        

        try:
            config = tf.ConfigProto()
            if(args.gpu_frac <= 0.):
                config.gpu_options.allow_growth = True
                if args.verbose: print("Memory Growth")
            elif(args.gpu_frac <= 1.):
                config.gpu_options.per_process_gpu_memory_fraction = args.gpu_frac
                if args.verbose: print("Becareful args.gpu_frac = ",args.gpu_frac,"It may cause problem if the value is superior to the available memory place.")
            sess = tf.Session(config=config)

            
            if args.MS_Strat=='Constr' and not(i_scale==0):
                if args.saveMS: saveImExt(tmp_output_image_path,args.output_img_name,str(list_scale[i_scale-1]),args.img_output_folder)
                init_img = get_upScaleOf(tmp_output_image_path,[scale_h,scale_w])
                former_scale = list_scale[i_scale-1]
                i_lowres = get_upScaleOf(tmp_output_image_path,None)
            elif args.MS_Strat=='Init' and not(i_scale==0):
                if args.saveMS: saveImExt(tmp_output_image_path,args.output_img_name,str(list_scale[i_scale-1]),args.img_output_folder)
                init_img = get_upScaleOf(tmp_output_image_path,[scale_h,scale_w])
            else:
                init_img = get_init_img_wrap(args,output_image_path,image_texture)
            
            loss_total,list_loss,list_loss_name = get_losses(args,sess, net,\
                M_dict,image_texture,dict_gram,pooling_type,padding,former_scale=former_scale,i_lowres=i_lowres)
                
            # Preparation of the assignation operation
            placeholder = tf.placeholder(tf.float32, shape=init_img.shape)
            placeholder_clip = tf.placeholder(tf.float32, shape=init_img.shape)

            assign_op = net['input'].assign(placeholder)
            clip_op = tf.clip_by_value(placeholder_clip,clip_value_min=np.mean(clip_value_min),clip_value_max=np.mean(clip_value_max),name="Clip") # The np.mean is a necessity in the case whe got the BGR values TODO : need to change all that
            
            if args.print_iter == 0 or args.print_iter > args.max_iter: 
                args.print_iter = args.max_iter
                        
            if(args.verbose): print("Initial total loss:")
            
            if(args.optimizer=='adam'): # Gradient Descent with ADAM algo
                optimizer = tf.train.AdamOptimizer(args.learning_rate)
            elif(args.optimizer=='GD'): # Gradient Descente 
                if((args.learning_rate > 1) and (args.verbose)): 
                    print("We recommande you to use a smaller value of learning rate when using the GD algo")
                optimizer = tf.train.GradientDescentOptimizer(args.learning_rate)
                
            if((args.optimizer=='GD') or (args.optimizer=='adam')):
                if args.savedIntermediateIm:
                    raise(NotImplementedError)
                    
                train = optimizer.minimize(loss_total)

                sess.run(tf.global_variables_initializer())
                sess.run(assign_op, {placeholder: init_img})
                            
                sess.graph.finalize() # To test if the graph is correct

                t3 = time.time()
                if(args.verbose): print("Session with Adam or GD initialized after ",t3-t2," s")
                if(args.verbose): print("Loss value before optimization:")
                if(args.verbose): print_loss_tab(sess,list_loss,list_loss_name)
                for i in range(args.max_iter):
                    if(i%args.print_iter==0):
                        if(args.tf_profiler):
                            run_options = tf.RunOptions(trace_level=tf.RunOptions.FULL_TRACE)
                            run_metadata = tf.RunMetadata()
                            sess.run(train,options=run_options, run_metadata=run_metadata)
                        else:
                            t3 =  time.time()
                            sess.run(train)
                            t4 = time.time()
                            result_img = sess.run(net['input'])
                            if(args.clip_var==1): # Clipping the variable
                                cliptensor = sess.run(clip_op,{placeholder_clip: result_img})
                                sess.run(assign_op, {placeholder: cliptensor})
                            if(args.verbose): print("Iteration ",i, "after ",t4-t3," s")
                            if(args.verbose): print_loss_tab(sess,list_loss,list_loss_name)
                            result_img_postproc = postprocess(result_img)
                            scipy.misc.toimage(result_img_postproc).save(output_image_path)
                    else:
                        # Just training
                        sess.run(train)
                        if(args.clip_var==1): # Clipping the variable
                            result_img = sess.run(net['input'])
                            cliptensor = sess.run(clip_op,{placeholder_clip: result_img})
                            sess.run(assign_op, {placeholder: cliptensor}) 
            elif(args.optimizer=='lbfgs'):
                if(args.verbose): print("Start LBFGS optimization with a print each ",args.print_iter," iterations")
                print_disp = args.iprint if args.verbose else 0 # Number of iterations between optimizer print statements.
                if args.savedIntermediateIm: # h,w,output_image_path,ext
                    folder_forcallback  =args.img_output_folder + args.output_img_name+'/'
                    name_output_forcallback =folder_forcallback + args.output_img_name + '_h' +str(scale_h)+ '_w' +str(scale_w)
                    pathlib.Path(folder_forcallback).mkdir(parents=True, exist_ok=True)
                    callback = partial(savedIm_callback,nbIterSaved=args.print_iter,h=scale_h\
                        ,w=scale_w,output_image_path=name_output_forcallback,ext=args.img_ext)
                else: # print_loss_tab_callback(Xi,list_loss,list_loss_name):
                    callback = partial(print_loss_tab_callback,nbIterSaved=args.print_iter,h=scale_h\
                        ,w=scale_w,list_loss=list_loss,list_loss_name=list_loss_name,sess=sess)
                optimizer_kwargs = {'maxiter': args.max_iter,'maxcor': args.maxcor, \
                    'disp': print_disp}
                # To solve the non retro compatibility of Tensorflow !
                if test_version_tf_sup('1.4'): 
                    bnds = get_lbfgs_bnds(init_img,clip_value_min,clip_value_max,BGR)
                    trainable_variables = tf.trainable_variables()[0]
                    var_to_bounds = {trainable_variables: bnds}
                    optimizer = tf.contrib.opt.ScipyOptimizerInterface(loss_total,var_to_bounds=var_to_bounds,
                        method='L-BFGS-B',options=optimizer_kwargs)   
                else:
                    raise(NotImplementedError('You need to have a version of tensorflow superior to 1.4'))   
                sess.run(tf.global_variables_initializer())
                sess.run(assign_op, {placeholder: init_img})
                            
                sess.graph.finalize() # To test if the graph is correct
                
                if(args.verbose): print("Loss values before optimization:")
                if(args.verbose): print_loss_tab(sess,list_loss,list_loss_name)
                optimizer.minimize(sess,step_callback=callback)
                            
            # The last iterations are not made
            # The End : save the resulting image
            result_img = sess.run(net['input'])
            result_img_postproc = postprocess(result_img.copy())
            scipy.misc.toimage(result_img_postproc).save(output_image_path) 
            
        except:
            if(args.verbose): print("Error, in the lbfgs case the image can be strange and incorrect")
            result_img = sess.run(net['input'])
            result_img_postproc = postprocess(result_img)
            output_image_path_error = args.img_output_folder + args.output_img_name+'_error'+'.' +args.img_ext
            scipy.misc.toimage(result_img_postproc).save(output_image_path_error)
            # In the case of the lbfgs optimizer we only get the init_img if we did not do a check point before
            raise 
        finally:
            sess.close()
            tf.reset_default_graph()
            if(args.verbose): 
                print("Close Sess - End of the global optimization.")
                tend = time.time()
                print("Computation total for ",tend-tinit," s")

def main():
    #global args
    parser = get_parser_args()
    args = parser.parse_args()
    run_synthesis(args)
    
def main_with_option():
    parser = get_parser_args()
    brick = "mesh_texture_surface_2048"
    ##brick = "mesh_texture_surface_4096"
    #brick = "lego_1024"
    brick = "TexturesCom_BrickSmallNew0099_1_seamless_S_1024"
    ##brick = "StarryNight"
    ##brick = "TilesOrnate0158_1_S"
    img_folder = "dataImages2/"
    img_output_folder = "dataImages2/"
    #img_folder = "HDImages/"
    #img_output_folder = "HDImages_output/"
    image_texture_name = brick
    content_img_name  = brick
    max_iter = 20
    print_iter = 1
    start_from_noise = 1 # True
    init_noise_ratio = 1.0 # TODO add a gaussian noise on the image instead a uniform one
    content_strengh = 0.001
    optimizer = 'lbfgs'
    learning_rate = 1 # 10 for adam and 10**(-10) for GD
    maxcor = 10
    sampling = 'up'
    loss = ['texture']
    #loss = ['texture']
    saveMS = True
    #MS_Strat = 'Constr'
    #MS_Strat = ''
    MS_Strat = 'Init'
    eps = 10**(-16)
    # python run_synthesis.py --texture_ref_name mesh_texture_surface_2048 --print_iter 100 --max_iter 2000 --loss texture --img_folder HDImages/ --img_output_folder HDImages_output --MS_Strat Init --K 0
    # In order to set the parameter before run the script
    parser.set_defaults(texture_ref_name=image_texture_name,max_iter=max_iter,img_folder=img_folder,
        print_iter=print_iter,start_from_noise=start_from_noise,img_output_folder=img_output_folder,
        content_img_name=content_img_name,init_noise_ratio=init_noise_ratio,
        content_strengh=content_strengh,optimizer=optimizer,maxcor=maxcor,
        learning_rate=learning_rate,sampling=sampling,MS_Strat=MS_Strat,loss=loss,saveMS=saveMS,eps=eps)
    args = parser.parse_args()
    run_synthesis(args)
    
#def main_with_option2():
    #parser = get_parser_args()
    #image_texture_name= "StarryNight_Big"
    #image_texture_name= "StarryNight"
    #starry = "StarryNight"
    #marbre = 'GrungeMarbled0021_S'
    #tile =  "TilesOrnate0158_1_S"
    #tile2 = "TilesZellige0099_1_S"
    #peddle = "pebbles"
    #brick = "BrickSmallBrown0293_1_S"
    ##D ="D20_01"
    ##orange = "orange"
    ##bleu = "bleu"
    ##glass = "glass"
    ##damier ='DamierBig_Proces'
    ##camouflage = 'Camouflage0003_S'
    ##brick = 'Brick_512_1'
    ###brick = 'MarbreWhite_1'
    ###brick = 'Camouflage_1'
    ##brick = 'OrnamentsCambodia0055_512'
    #brick = "BrickRound0122_1_seamless_S"
    #brick = "lego_1024maison"
    #brick = "lego_1024Ref_256"
    #output_img_name = 'lego_1024Ref_256_maison_000step'
    #img_folder = "images/"
    #img_output_folder = "images/"
    #image_texture_name = brick
    #content_img_name  = brick
    #max_iter = 2000
    #print_iter = 2000
    #start_from_noise = 1 # True
    #init_noise_ratio = 1.0 # TODO add a gaussian noise on the image instead a uniform one
    #content_strengh = 0.001
    #optimizer = 'lbfgs'
    #learning_rate = 1 # 10 for adam and 10**(-10) for GD
    #maxcor = 20
    #sampling = 'up'
    #MS_Strat = 'Init'
    #loss = ['texture','spectrum']
    #saveMS = True
    ##MS_Strat = 'Constr'
    ##MS_Strat = ''
    ## In order to set the parameter before run the script
    #parser.set_defaults(texture_ref_name=image_texture_name,max_iter=max_iter,img_folder=img_folder,
        #print_iter=print_iter,start_from_noise=start_from_noise,img_output_folder=img_output_folder,
        #content_img_name=content_img_name,init_noise_ratio=init_noise_ratio,output_img_name=output_img_name,
        #content_strengh=content_strengh,optimizer=optimizer,maxcor=maxcor,
        #learning_rate=learning_rate,sampling=sampling,MS_Strat=MS_Strat,loss=loss,saveMS=saveMS)
    #args = parser.parse_args()
    #run_synthesis(args)

if __name__ == '__main__':
    main() 
    # Command line : python run_synthesis.py --texture_ref_name estampe --print_iter 1000 --max_iter 1000 --loss texture content --HistoMatching
    #main_with_option()
    # Use CUDA_VISIBLE_DEVICES='' python ... to avoid using CUDA
    # Pour update Tensorflow : python3.6 -m pip install --upgrade tensorflow-gpu
